<?php

namespace Services\Template\Builders;

use DB;
use Schema;
use Mockery;
use Faker\Factory;
use Tests\TestCase;
use Illuminate\Database\Eloquent\Model;
use LaravelEnso\Helpers\app\Classes\Obj;
use LaravelEnso\Tables\app\Services\Table;
use LaravelEnso\Tables\app\Services\Action;

class ActionTest extends TestCase
{
    private $testModel;

    private $faker;

    protected function setUp() :void
    {
        parent::setUp();

        $this->faker = Factory::create();

        $this->createTestModelTable();

        ActionSpy::$rows = [];
        TestTableStub::$numPages = 0;
    }

    /** @test */
    public function can_process_without_row()
    {
        (new ActionSpy(
            TestTable::class,
            [
                'columns'=>[]
            ]
        ))->handle();

        $this->assertEmpty(ActionSpy::$rows);
    }

    /** @test */
    public function can_process_with_one_row()
    {
        $this->testModel = $this->createTestModel();

        (new ActionSpy(
            TestTable::class,
            [
                'columns'=>[]
            ]
        ))->handle();

        $this->assertEquals($this->testModel->name,ActionSpy::$rows[0]['name']);
    }

    /** @test */
    public function can_process_with_many_row()
    {
        TestTableStub::$numPages = 2;

        (new ActionSpy(
            TestTableStub::class,
            [
                'columns'=>[],
            ]
        ))->handle();

        $this->assertEquals(0, ActionSpy::$rows[0][0]);
        $this->assertEquals(1, ActionSpy::$rows[1][0]);
        $this->assertCount(2, ActionSpy::$rows);
    }


    private function createTestModelTable()
    {
        Schema::create('test_models', function ($table) {
            $table->increments('id');
            $table->string('name')->nullable();
            $table->boolean('is_active')->nullable();
            $table->integer('price')->nullable();
            $table->timestamps();
        });
    }

    private function createTestModel()
    {
        return TestModel::create([
            'name' => $this->faker->name,
        ]);
    }

}

class ActionSpy extends Action {
    public static $rows = [];

    public function process(array $row)
    {
        self::$rows[] = $row;
    }
}

class TestModel extends Model
{
    protected $fillable = ['name'];
}

class TestTable extends Table{

    public function query()
    {
        return TestModel::select('*');
    }
}


class TestTableStub extends Table{
    private $builder;
    public static $numPages=0;

    /**
     * TestTableStub constructor.
     */
    public function __construct()
    {
        parent::__construct();

        $data = $this->initData();

        $this->initBuilder($data);
    }

    public function query()
    {
        // TODO: Implement query() method.
    }

    public function fetcher()
    {

        return $this->builder; // TODO: Change the autogenerated stub
    }

    /**
     * @return array
     */
    private function initData(): array
    {
        $data = [];

        for ($i = 0; $i < self::$numPages; $i++) {
            $data[$i] = new Obj([]);
            $data[$i]->set($i, [$i]);
        }

        $data[self::$numPages] = new Obj([]);

        return $data;
    }

    /**
     * @param array $data
     */
    private function initBuilder(array $data): void
    {
        $this->builder = Mockery::mock(Table\Builder::class);
        $this->builder->shouldReceive('fetch')
            ->andReturnUsing(function ($arg) use ($data) {
                return $data[$arg];
            });
    }


}

